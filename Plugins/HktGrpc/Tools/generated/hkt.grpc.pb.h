// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: hkt.proto
// Original file comments:
// gRPC 통신 규약을 정의하는 Protobuf 파일입니다.
#ifndef GRPC_hkt_2eproto__INCLUDED
#define GRPC_hkt_2eproto__INCLUDED

#include "hkt.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace hkt {

// ===================================================================
// 서비스 정의
// ===================================================================
class HktService final {
 public:
  static constexpr char const* service_full_name() {
    return "hkt.HktService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Login(::grpc::ClientContext* context, const ::hkt::AccountRequest& request, ::hkt::AccountResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hkt::AccountResponse>> AsyncLogin(::grpc::ClientContext* context, const ::hkt::AccountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hkt::AccountResponse>>(AsyncLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hkt::AccountResponse>> PrepareAsyncLogin(::grpc::ClientContext* context, const ::hkt::AccountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hkt::AccountResponse>>(PrepareAsyncLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::hkt::SyncResponse>> SyncArea(::grpc::ClientContext* context, const ::hkt::SyncRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::hkt::SyncResponse>>(SyncAreaRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::hkt::SyncResponse>> AsyncSyncArea(::grpc::ClientContext* context, const ::hkt::SyncRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::hkt::SyncResponse>>(AsyncSyncAreaRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::hkt::SyncResponse>> PrepareAsyncSyncArea(::grpc::ClientContext* context, const ::hkt::SyncRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::hkt::SyncResponse>>(PrepareAsyncSyncAreaRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateBehavior(::grpc::ClientContext* context, const ::hkt::CreateBehaviorRequest& request, ::hkt::CreateBehaviorResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hkt::CreateBehaviorResponse>> AsyncCreateBehavior(::grpc::ClientContext* context, const ::hkt::CreateBehaviorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hkt::CreateBehaviorResponse>>(AsyncCreateBehaviorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hkt::CreateBehaviorResponse>> PrepareAsyncCreateBehavior(::grpc::ClientContext* context, const ::hkt::CreateBehaviorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hkt::CreateBehaviorResponse>>(PrepareAsyncCreateBehaviorRaw(context, request, cq));
    }
    virtual ::grpc::Status DestroyBehavior(::grpc::ClientContext* context, const ::hkt::DestroyBehaviorRequest& request, ::hkt::DestroyBehaviorResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hkt::DestroyBehaviorResponse>> AsyncDestroyBehavior(::grpc::ClientContext* context, const ::hkt::DestroyBehaviorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hkt::DestroyBehaviorResponse>>(AsyncDestroyBehaviorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hkt::DestroyBehaviorResponse>> PrepareAsyncDestroyBehavior(::grpc::ClientContext* context, const ::hkt::DestroyBehaviorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hkt::DestroyBehaviorResponse>>(PrepareAsyncDestroyBehaviorRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Login(::grpc::ClientContext* context, const ::hkt::AccountRequest* request, ::hkt::AccountResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Login(::grpc::ClientContext* context, const ::hkt::AccountRequest* request, ::hkt::AccountResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SyncArea(::grpc::ClientContext* context, const ::hkt::SyncRequest* request, ::grpc::ClientReadReactor< ::hkt::SyncResponse>* reactor) = 0;
      virtual void CreateBehavior(::grpc::ClientContext* context, const ::hkt::CreateBehaviorRequest* request, ::hkt::CreateBehaviorResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateBehavior(::grpc::ClientContext* context, const ::hkt::CreateBehaviorRequest* request, ::hkt::CreateBehaviorResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DestroyBehavior(::grpc::ClientContext* context, const ::hkt::DestroyBehaviorRequest* request, ::hkt::DestroyBehaviorResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DestroyBehavior(::grpc::ClientContext* context, const ::hkt::DestroyBehaviorRequest* request, ::hkt::DestroyBehaviorResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::hkt::AccountResponse>* AsyncLoginRaw(::grpc::ClientContext* context, const ::hkt::AccountRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::hkt::AccountResponse>* PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::hkt::AccountRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::hkt::SyncResponse>* SyncAreaRaw(::grpc::ClientContext* context, const ::hkt::SyncRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::hkt::SyncResponse>* AsyncSyncAreaRaw(::grpc::ClientContext* context, const ::hkt::SyncRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::hkt::SyncResponse>* PrepareAsyncSyncAreaRaw(::grpc::ClientContext* context, const ::hkt::SyncRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::hkt::CreateBehaviorResponse>* AsyncCreateBehaviorRaw(::grpc::ClientContext* context, const ::hkt::CreateBehaviorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::hkt::CreateBehaviorResponse>* PrepareAsyncCreateBehaviorRaw(::grpc::ClientContext* context, const ::hkt::CreateBehaviorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::hkt::DestroyBehaviorResponse>* AsyncDestroyBehaviorRaw(::grpc::ClientContext* context, const ::hkt::DestroyBehaviorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::hkt::DestroyBehaviorResponse>* PrepareAsyncDestroyBehaviorRaw(::grpc::ClientContext* context, const ::hkt::DestroyBehaviorRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Login(::grpc::ClientContext* context, const ::hkt::AccountRequest& request, ::hkt::AccountResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hkt::AccountResponse>> AsyncLogin(::grpc::ClientContext* context, const ::hkt::AccountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hkt::AccountResponse>>(AsyncLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hkt::AccountResponse>> PrepareAsyncLogin(::grpc::ClientContext* context, const ::hkt::AccountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hkt::AccountResponse>>(PrepareAsyncLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::hkt::SyncResponse>> SyncArea(::grpc::ClientContext* context, const ::hkt::SyncRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::hkt::SyncResponse>>(SyncAreaRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::hkt::SyncResponse>> AsyncSyncArea(::grpc::ClientContext* context, const ::hkt::SyncRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::hkt::SyncResponse>>(AsyncSyncAreaRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::hkt::SyncResponse>> PrepareAsyncSyncArea(::grpc::ClientContext* context, const ::hkt::SyncRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::hkt::SyncResponse>>(PrepareAsyncSyncAreaRaw(context, request, cq));
    }
    ::grpc::Status CreateBehavior(::grpc::ClientContext* context, const ::hkt::CreateBehaviorRequest& request, ::hkt::CreateBehaviorResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hkt::CreateBehaviorResponse>> AsyncCreateBehavior(::grpc::ClientContext* context, const ::hkt::CreateBehaviorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hkt::CreateBehaviorResponse>>(AsyncCreateBehaviorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hkt::CreateBehaviorResponse>> PrepareAsyncCreateBehavior(::grpc::ClientContext* context, const ::hkt::CreateBehaviorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hkt::CreateBehaviorResponse>>(PrepareAsyncCreateBehaviorRaw(context, request, cq));
    }
    ::grpc::Status DestroyBehavior(::grpc::ClientContext* context, const ::hkt::DestroyBehaviorRequest& request, ::hkt::DestroyBehaviorResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hkt::DestroyBehaviorResponse>> AsyncDestroyBehavior(::grpc::ClientContext* context, const ::hkt::DestroyBehaviorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hkt::DestroyBehaviorResponse>>(AsyncDestroyBehaviorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hkt::DestroyBehaviorResponse>> PrepareAsyncDestroyBehavior(::grpc::ClientContext* context, const ::hkt::DestroyBehaviorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hkt::DestroyBehaviorResponse>>(PrepareAsyncDestroyBehaviorRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Login(::grpc::ClientContext* context, const ::hkt::AccountRequest* request, ::hkt::AccountResponse* response, std::function<void(::grpc::Status)>) override;
      void Login(::grpc::ClientContext* context, const ::hkt::AccountRequest* request, ::hkt::AccountResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SyncArea(::grpc::ClientContext* context, const ::hkt::SyncRequest* request, ::grpc::ClientReadReactor< ::hkt::SyncResponse>* reactor) override;
      void CreateBehavior(::grpc::ClientContext* context, const ::hkt::CreateBehaviorRequest* request, ::hkt::CreateBehaviorResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateBehavior(::grpc::ClientContext* context, const ::hkt::CreateBehaviorRequest* request, ::hkt::CreateBehaviorResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DestroyBehavior(::grpc::ClientContext* context, const ::hkt::DestroyBehaviorRequest* request, ::hkt::DestroyBehaviorResponse* response, std::function<void(::grpc::Status)>) override;
      void DestroyBehavior(::grpc::ClientContext* context, const ::hkt::DestroyBehaviorRequest* request, ::hkt::DestroyBehaviorResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::hkt::AccountResponse>* AsyncLoginRaw(::grpc::ClientContext* context, const ::hkt::AccountRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::hkt::AccountResponse>* PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::hkt::AccountRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::hkt::SyncResponse>* SyncAreaRaw(::grpc::ClientContext* context, const ::hkt::SyncRequest& request) override;
    ::grpc::ClientAsyncReader< ::hkt::SyncResponse>* AsyncSyncAreaRaw(::grpc::ClientContext* context, const ::hkt::SyncRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::hkt::SyncResponse>* PrepareAsyncSyncAreaRaw(::grpc::ClientContext* context, const ::hkt::SyncRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::hkt::CreateBehaviorResponse>* AsyncCreateBehaviorRaw(::grpc::ClientContext* context, const ::hkt::CreateBehaviorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::hkt::CreateBehaviorResponse>* PrepareAsyncCreateBehaviorRaw(::grpc::ClientContext* context, const ::hkt::CreateBehaviorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::hkt::DestroyBehaviorResponse>* AsyncDestroyBehaviorRaw(::grpc::ClientContext* context, const ::hkt::DestroyBehaviorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::hkt::DestroyBehaviorResponse>* PrepareAsyncDestroyBehaviorRaw(::grpc::ClientContext* context, const ::hkt::DestroyBehaviorRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Login_;
    const ::grpc::internal::RpcMethod rpcmethod_SyncArea_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateBehavior_;
    const ::grpc::internal::RpcMethod rpcmethod_DestroyBehavior_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Login(::grpc::ServerContext* context, const ::hkt::AccountRequest* request, ::hkt::AccountResponse* response);
    virtual ::grpc::Status SyncArea(::grpc::ServerContext* context, const ::hkt::SyncRequest* request, ::grpc::ServerWriter< ::hkt::SyncResponse>* writer);
    virtual ::grpc::Status CreateBehavior(::grpc::ServerContext* context, const ::hkt::CreateBehaviorRequest* request, ::hkt::CreateBehaviorResponse* response);
    virtual ::grpc::Status DestroyBehavior(::grpc::ServerContext* context, const ::hkt::DestroyBehaviorRequest* request, ::hkt::DestroyBehaviorResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Login() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::hkt::AccountRequest* /*request*/, ::hkt::AccountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogin(::grpc::ServerContext* context, ::hkt::AccountRequest* request, ::grpc::ServerAsyncResponseWriter< ::hkt::AccountResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SyncArea : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SyncArea() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SyncArea() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SyncArea(::grpc::ServerContext* /*context*/, const ::hkt::SyncRequest* /*request*/, ::grpc::ServerWriter< ::hkt::SyncResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSyncArea(::grpc::ServerContext* context, ::hkt::SyncRequest* request, ::grpc::ServerAsyncWriter< ::hkt::SyncResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateBehavior : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateBehavior() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_CreateBehavior() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateBehavior(::grpc::ServerContext* /*context*/, const ::hkt::CreateBehaviorRequest* /*request*/, ::hkt::CreateBehaviorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateBehavior(::grpc::ServerContext* context, ::hkt::CreateBehaviorRequest* request, ::grpc::ServerAsyncResponseWriter< ::hkt::CreateBehaviorResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DestroyBehavior : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DestroyBehavior() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_DestroyBehavior() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DestroyBehavior(::grpc::ServerContext* /*context*/, const ::hkt::DestroyBehaviorRequest* /*request*/, ::hkt::DestroyBehaviorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDestroyBehavior(::grpc::ServerContext* context, ::hkt::DestroyBehaviorRequest* request, ::grpc::ServerAsyncResponseWriter< ::hkt::DestroyBehaviorResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Login<WithAsyncMethod_SyncArea<WithAsyncMethod_CreateBehavior<WithAsyncMethod_DestroyBehavior<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Login() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::hkt::AccountRequest, ::hkt::AccountResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::hkt::AccountRequest* request, ::hkt::AccountResponse* response) { return this->Login(context, request, response); }));}
    void SetMessageAllocatorFor_Login(
        ::grpc::MessageAllocator< ::hkt::AccountRequest, ::hkt::AccountResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::hkt::AccountRequest, ::hkt::AccountResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::hkt::AccountRequest* /*request*/, ::hkt::AccountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Login(
      ::grpc::CallbackServerContext* /*context*/, const ::hkt::AccountRequest* /*request*/, ::hkt::AccountResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SyncArea : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SyncArea() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::hkt::SyncRequest, ::hkt::SyncResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::hkt::SyncRequest* request) { return this->SyncArea(context, request); }));
    }
    ~WithCallbackMethod_SyncArea() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SyncArea(::grpc::ServerContext* /*context*/, const ::hkt::SyncRequest* /*request*/, ::grpc::ServerWriter< ::hkt::SyncResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::hkt::SyncResponse>* SyncArea(
      ::grpc::CallbackServerContext* /*context*/, const ::hkt::SyncRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateBehavior : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateBehavior() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::hkt::CreateBehaviorRequest, ::hkt::CreateBehaviorResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::hkt::CreateBehaviorRequest* request, ::hkt::CreateBehaviorResponse* response) { return this->CreateBehavior(context, request, response); }));}
    void SetMessageAllocatorFor_CreateBehavior(
        ::grpc::MessageAllocator< ::hkt::CreateBehaviorRequest, ::hkt::CreateBehaviorResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::hkt::CreateBehaviorRequest, ::hkt::CreateBehaviorResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateBehavior() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateBehavior(::grpc::ServerContext* /*context*/, const ::hkt::CreateBehaviorRequest* /*request*/, ::hkt::CreateBehaviorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateBehavior(
      ::grpc::CallbackServerContext* /*context*/, const ::hkt::CreateBehaviorRequest* /*request*/, ::hkt::CreateBehaviorResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DestroyBehavior : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DestroyBehavior() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::hkt::DestroyBehaviorRequest, ::hkt::DestroyBehaviorResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::hkt::DestroyBehaviorRequest* request, ::hkt::DestroyBehaviorResponse* response) { return this->DestroyBehavior(context, request, response); }));}
    void SetMessageAllocatorFor_DestroyBehavior(
        ::grpc::MessageAllocator< ::hkt::DestroyBehaviorRequest, ::hkt::DestroyBehaviorResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::hkt::DestroyBehaviorRequest, ::hkt::DestroyBehaviorResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DestroyBehavior() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DestroyBehavior(::grpc::ServerContext* /*context*/, const ::hkt::DestroyBehaviorRequest* /*request*/, ::hkt::DestroyBehaviorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DestroyBehavior(
      ::grpc::CallbackServerContext* /*context*/, const ::hkt::DestroyBehaviorRequest* /*request*/, ::hkt::DestroyBehaviorResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Login<WithCallbackMethod_SyncArea<WithCallbackMethod_CreateBehavior<WithCallbackMethod_DestroyBehavior<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Login() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::hkt::AccountRequest* /*request*/, ::hkt::AccountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SyncArea : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SyncArea() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SyncArea() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SyncArea(::grpc::ServerContext* /*context*/, const ::hkt::SyncRequest* /*request*/, ::grpc::ServerWriter< ::hkt::SyncResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateBehavior : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateBehavior() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_CreateBehavior() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateBehavior(::grpc::ServerContext* /*context*/, const ::hkt::CreateBehaviorRequest* /*request*/, ::hkt::CreateBehaviorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DestroyBehavior : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DestroyBehavior() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_DestroyBehavior() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DestroyBehavior(::grpc::ServerContext* /*context*/, const ::hkt::DestroyBehaviorRequest* /*request*/, ::hkt::DestroyBehaviorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Login() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::hkt::AccountRequest* /*request*/, ::hkt::AccountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogin(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SyncArea : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SyncArea() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SyncArea() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SyncArea(::grpc::ServerContext* /*context*/, const ::hkt::SyncRequest* /*request*/, ::grpc::ServerWriter< ::hkt::SyncResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSyncArea(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateBehavior : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateBehavior() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_CreateBehavior() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateBehavior(::grpc::ServerContext* /*context*/, const ::hkt::CreateBehaviorRequest* /*request*/, ::hkt::CreateBehaviorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateBehavior(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DestroyBehavior : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DestroyBehavior() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_DestroyBehavior() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DestroyBehavior(::grpc::ServerContext* /*context*/, const ::hkt::DestroyBehaviorRequest* /*request*/, ::hkt::DestroyBehaviorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDestroyBehavior(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Login() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Login(context, request, response); }));
    }
    ~WithRawCallbackMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::hkt::AccountRequest* /*request*/, ::hkt::AccountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Login(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SyncArea : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SyncArea() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->SyncArea(context, request); }));
    }
    ~WithRawCallbackMethod_SyncArea() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SyncArea(::grpc::ServerContext* /*context*/, const ::hkt::SyncRequest* /*request*/, ::grpc::ServerWriter< ::hkt::SyncResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* SyncArea(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateBehavior : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateBehavior() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateBehavior(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateBehavior() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateBehavior(::grpc::ServerContext* /*context*/, const ::hkt::CreateBehaviorRequest* /*request*/, ::hkt::CreateBehaviorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateBehavior(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DestroyBehavior : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DestroyBehavior() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DestroyBehavior(context, request, response); }));
    }
    ~WithRawCallbackMethod_DestroyBehavior() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DestroyBehavior(::grpc::ServerContext* /*context*/, const ::hkt::DestroyBehaviorRequest* /*request*/, ::hkt::DestroyBehaviorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DestroyBehavior(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Login() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::hkt::AccountRequest, ::hkt::AccountResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::hkt::AccountRequest, ::hkt::AccountResponse>* streamer) {
                       return this->StreamedLogin(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::hkt::AccountRequest* /*request*/, ::hkt::AccountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLogin(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::hkt::AccountRequest,::hkt::AccountResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateBehavior : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateBehavior() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::hkt::CreateBehaviorRequest, ::hkt::CreateBehaviorResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::hkt::CreateBehaviorRequest, ::hkt::CreateBehaviorResponse>* streamer) {
                       return this->StreamedCreateBehavior(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateBehavior() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateBehavior(::grpc::ServerContext* /*context*/, const ::hkt::CreateBehaviorRequest* /*request*/, ::hkt::CreateBehaviorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateBehavior(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::hkt::CreateBehaviorRequest,::hkt::CreateBehaviorResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DestroyBehavior : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DestroyBehavior() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::hkt::DestroyBehaviorRequest, ::hkt::DestroyBehaviorResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::hkt::DestroyBehaviorRequest, ::hkt::DestroyBehaviorResponse>* streamer) {
                       return this->StreamedDestroyBehavior(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DestroyBehavior() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DestroyBehavior(::grpc::ServerContext* /*context*/, const ::hkt::DestroyBehaviorRequest* /*request*/, ::hkt::DestroyBehaviorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDestroyBehavior(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::hkt::DestroyBehaviorRequest,::hkt::DestroyBehaviorResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Login<WithStreamedUnaryMethod_CreateBehavior<WithStreamedUnaryMethod_DestroyBehavior<Service > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_SyncArea : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_SyncArea() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::hkt::SyncRequest, ::hkt::SyncResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::hkt::SyncRequest, ::hkt::SyncResponse>* streamer) {
                       return this->StreamedSyncArea(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_SyncArea() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SyncArea(::grpc::ServerContext* /*context*/, const ::hkt::SyncRequest* /*request*/, ::grpc::ServerWriter< ::hkt::SyncResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSyncArea(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::hkt::SyncRequest,::hkt::SyncResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_SyncArea<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_Login<WithSplitStreamingMethod_SyncArea<WithStreamedUnaryMethod_CreateBehavior<WithStreamedUnaryMethod_DestroyBehavior<Service > > > > StreamedService;
};

}  // namespace hkt


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_hkt_2eproto__INCLUDED
