// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: hkt.proto

#include "hkt.pb.h"
#include "hkt.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace hkt {

static const char* HktService_method_names[] = {
  "/hkt.HktService/Login",
  "/hkt.HktService/SyncArea",
  "/hkt.HktService/CreateBehavior",
  "/hkt.HktService/DestroyBehavior",
};

std::unique_ptr< HktService::Stub> HktService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< HktService::Stub> stub(new HktService::Stub(channel, options));
  return stub;
}

HktService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Login_(HktService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SyncArea_(HktService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_CreateBehavior_(HktService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DestroyBehavior_(HktService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status HktService::Stub::Login(::grpc::ClientContext* context, const ::hkt::AccountRequest& request, ::hkt::AccountResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::hkt::AccountRequest, ::hkt::AccountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Login_, context, request, response);
}

void HktService::Stub::async::Login(::grpc::ClientContext* context, const ::hkt::AccountRequest* request, ::hkt::AccountResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::hkt::AccountRequest, ::hkt::AccountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, std::move(f));
}

void HktService::Stub::async::Login(::grpc::ClientContext* context, const ::hkt::AccountRequest* request, ::hkt::AccountResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::hkt::AccountResponse>* HktService::Stub::PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::hkt::AccountRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::hkt::AccountResponse, ::hkt::AccountRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Login_, context, request);
}

::grpc::ClientAsyncResponseReader< ::hkt::AccountResponse>* HktService::Stub::AsyncLoginRaw(::grpc::ClientContext* context, const ::hkt::AccountRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLoginRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::hkt::SyncResponse>* HktService::Stub::SyncAreaRaw(::grpc::ClientContext* context, const ::hkt::SyncRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::hkt::SyncResponse>::Create(channel_.get(), rpcmethod_SyncArea_, context, request);
}

void HktService::Stub::async::SyncArea(::grpc::ClientContext* context, const ::hkt::SyncRequest* request, ::grpc::ClientReadReactor< ::hkt::SyncResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::hkt::SyncResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_SyncArea_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::hkt::SyncResponse>* HktService::Stub::AsyncSyncAreaRaw(::grpc::ClientContext* context, const ::hkt::SyncRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::hkt::SyncResponse>::Create(channel_.get(), cq, rpcmethod_SyncArea_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::hkt::SyncResponse>* HktService::Stub::PrepareAsyncSyncAreaRaw(::grpc::ClientContext* context, const ::hkt::SyncRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::hkt::SyncResponse>::Create(channel_.get(), cq, rpcmethod_SyncArea_, context, request, false, nullptr);
}

::grpc::Status HktService::Stub::CreateBehavior(::grpc::ClientContext* context, const ::hkt::CreateBehaviorRequest& request, ::hkt::CreateBehaviorResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::hkt::CreateBehaviorRequest, ::hkt::CreateBehaviorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateBehavior_, context, request, response);
}

void HktService::Stub::async::CreateBehavior(::grpc::ClientContext* context, const ::hkt::CreateBehaviorRequest* request, ::hkt::CreateBehaviorResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::hkt::CreateBehaviorRequest, ::hkt::CreateBehaviorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateBehavior_, context, request, response, std::move(f));
}

void HktService::Stub::async::CreateBehavior(::grpc::ClientContext* context, const ::hkt::CreateBehaviorRequest* request, ::hkt::CreateBehaviorResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateBehavior_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::hkt::CreateBehaviorResponse>* HktService::Stub::PrepareAsyncCreateBehaviorRaw(::grpc::ClientContext* context, const ::hkt::CreateBehaviorRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::hkt::CreateBehaviorResponse, ::hkt::CreateBehaviorRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateBehavior_, context, request);
}

::grpc::ClientAsyncResponseReader< ::hkt::CreateBehaviorResponse>* HktService::Stub::AsyncCreateBehaviorRaw(::grpc::ClientContext* context, const ::hkt::CreateBehaviorRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateBehaviorRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HktService::Stub::DestroyBehavior(::grpc::ClientContext* context, const ::hkt::DestroyBehaviorRequest& request, ::hkt::DestroyBehaviorResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::hkt::DestroyBehaviorRequest, ::hkt::DestroyBehaviorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DestroyBehavior_, context, request, response);
}

void HktService::Stub::async::DestroyBehavior(::grpc::ClientContext* context, const ::hkt::DestroyBehaviorRequest* request, ::hkt::DestroyBehaviorResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::hkt::DestroyBehaviorRequest, ::hkt::DestroyBehaviorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DestroyBehavior_, context, request, response, std::move(f));
}

void HktService::Stub::async::DestroyBehavior(::grpc::ClientContext* context, const ::hkt::DestroyBehaviorRequest* request, ::hkt::DestroyBehaviorResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DestroyBehavior_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::hkt::DestroyBehaviorResponse>* HktService::Stub::PrepareAsyncDestroyBehaviorRaw(::grpc::ClientContext* context, const ::hkt::DestroyBehaviorRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::hkt::DestroyBehaviorResponse, ::hkt::DestroyBehaviorRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DestroyBehavior_, context, request);
}

::grpc::ClientAsyncResponseReader< ::hkt::DestroyBehaviorResponse>* HktService::Stub::AsyncDestroyBehaviorRaw(::grpc::ClientContext* context, const ::hkt::DestroyBehaviorRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDestroyBehaviorRaw(context, request, cq);
  result->StartCall();
  return result;
}

HktService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HktService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HktService::Service, ::hkt::AccountRequest, ::hkt::AccountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HktService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::hkt::AccountRequest* req,
             ::hkt::AccountResponse* resp) {
               return service->Login(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HktService_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< HktService::Service, ::hkt::SyncRequest, ::hkt::SyncResponse>(
          [](HktService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::hkt::SyncRequest* req,
             ::grpc::ServerWriter<::hkt::SyncResponse>* writer) {
               return service->SyncArea(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HktService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HktService::Service, ::hkt::CreateBehaviorRequest, ::hkt::CreateBehaviorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HktService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::hkt::CreateBehaviorRequest* req,
             ::hkt::CreateBehaviorResponse* resp) {
               return service->CreateBehavior(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HktService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HktService::Service, ::hkt::DestroyBehaviorRequest, ::hkt::DestroyBehaviorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HktService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::hkt::DestroyBehaviorRequest* req,
             ::hkt::DestroyBehaviorResponse* resp) {
               return service->DestroyBehavior(ctx, req, resp);
             }, this)));
}

HktService::Service::~Service() {
}

::grpc::Status HktService::Service::Login(::grpc::ServerContext* context, const ::hkt::AccountRequest* request, ::hkt::AccountResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HktService::Service::SyncArea(::grpc::ServerContext* context, const ::hkt::SyncRequest* request, ::grpc::ServerWriter< ::hkt::SyncResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HktService::Service::CreateBehavior(::grpc::ServerContext* context, const ::hkt::CreateBehaviorRequest* request, ::hkt::CreateBehaviorResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HktService::Service::DestroyBehavior(::grpc::ServerContext* context, const ::hkt::DestroyBehaviorRequest* request, ::hkt::DestroyBehaviorResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace hkt
#include <grpcpp/ports_undef.inc>

